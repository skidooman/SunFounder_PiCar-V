name: core-car # you probably want to 'snapcraft register <name>'
base: core22 # the base snap is the execution environment for this snap
version: '0.1' # just for humans, typically '1.2+git' or '1.3.2'
summary: Snap to operate the Core Car, which is based on SunFounder Picar-V # 79 char long summary
description: |
  This project took the open source code from SunFounder Picar-V (as in video)
  project and modified it to enable a new UI interface. It also got rid
  of any Django dependencies. To the best of my abilities it only uses
  modules available in the Ubuntu archive + pip3. 

  The car itself was modified with a new battery pack (from SunFounder)
  so as to enable one member of my team (-Ogra-) to design a charging
  station -facility- . This is all for conference and trade shows
  but hopefully a few hobbyists can also reuse what I did.


  TO USE, YOU WILL NEED TO CONNECT INTERFACES, since it is in strict confinement.
  It is meant to work with Ubuntu Core (tested on Core 22), but Core 22.04 works too.
  
  INSTALLATION
  First, install the snap (snap install core-car).

  Then, connect your interfaces on Core, otherwise the OS will not give access
  snap connect core-car:name_of_plug snapd:name_of_slot

  It should look like this:
  skidooman@core-car:~$ snap connections core-car
Interface            Plug                          Slot                  Notes
camera               core-car:camera               :camera               manual
gpio-memory-control  core-car:gpio-memory-control  :gpio-memory-control  manual
home                 core-car:home                 :home                 manual
i2c                  core-car:i2c                  pi:i2c-0              manual
i2c                  core-car:i2c                  pi:i2c-1              manual
network              core-car:network              :network              -
network-bind         core-car:network-bind         :network-bind         -
 
  I would then sudo snap restart core-car, and it should work.

  Skidooman (VP of Field Engineering IoT)

grade: stable # must be 'stable' to release into candidate/stable channels
confinement: strict # use 'strict' once you have the right plugs and slots

lint:
  ignore:
    - classic
    - library

apps:
  server:
    daemon: simple
    restart-condition: on-failure
    command: bin/python3 $SNAP/etc/new_car.py $SNAP/templates $SNAP/static
    environment:
      LD_LIBRARY_PATH: $SNAP/usr/lib/aarch64-linux-gnu/avahi:$SNAP/usr/lib/aarch64-linux-gnu/blas:$SNAP/usr/lib/aarch64-linux-gnu/dri:$SNAP/usr/lib/aarch64-linux-gnu/engines-1.1:$SNAP/usr/lib/aarch64-linux-gnu/gdk-pixbuf-2.0:$SNAP/usr/lib/aarch64-linux-gnu/gio:$SNAP/usr/lib/aarch64-linux-gnu/gstreamer-1.0:$SNAP/usr/lib/aarch64-linux-gnu/gstreamer1.0:$SNAP/usr/lib/aarch64-linux-gnu/gtk-3.0:$SNAP/usr/lib/aarch64-linux-gnu/hwloc:$SNAP/usr/lib/aarch64-linux-gnu/lapack:$SNAP/usr/lib/atlas-base/atlas:$SNAP/usr/lib/$SNAPCRAFT_ARCH_TRIPLET/atlas/:$SNAP/usr/lib/$SNAPCRAFT_ARCH_TRIPLET/samba:$LD_LIBRARY_PATH
      #PYTHONPATH: $SNAP/usr/lib/python3.10/dist-packages:$SNAP/lib/python3.10/site-packages:$SNAP/usr/lib/python3/dist-packages
      PYTHONPATH: $SNAP/usr/lib/python3.8/dist-packages:$SNAP/lib/python3.8/site-packages:$SNAP/usr/lib/python3/dist-packages:$SNAP/remote_control/remote_control
      # Put the path to SunFounder plain in PYTHONPATH
    # I need 17 for Motor_A, 27 for Motor_B, 4 for PWM_A and 5 for PWM_B
    plugs: [home, network, network-bind, i2c, camera, gpio-memory-control]

  picar:
    command: bin/python3 $SNAP/bin/picar

  #enable-classic-i2c:
  #  command: install_i2c_dependency.sh

parts:
  core-car-base:
    # This is the base code for all PiCars
    # Some of that code can be quite useful. For instance, picar binary let us tests the servos
    # So this is the one we should build
    source: https://github.com/skidoomanubuntu/SunFounder_PiCar.git
    #plugin: dump
    plugin: python
    python-packages: [flask, flask-sock, RPI.GPIO, numpy, picar, smbus]
    # python-packages: [opencv-python]
    # On classic also do sudo apt install libgl1
    python-requirements: [requirements.txt]
    stage-packages: [python3,python3-smbus,python3-opencv]
    #organize:
    #  remote_control/remote_control/new_car.py: bin/new_car.py 
    override-stage: |
      craftctl default
      #"${CRAFT_STAGE}/usr/bin/python3 ${CRAFT_STAGE}/../parts/opencv/build/python_loader/setup.py install"

    override-prime: |
      craftctl default
      mkdir -p "${CRAFT_PRIME}/usr/local/bin"
      cp "${CRAFT_STAGE}/mjpg-streamer/mjpg_streamer" "${CRAFT_PRIME}/usr/local/bin/"
      #python3 parts/opencv/build/python_loader/setup.py install

  core-car-code:
    source: https://github.com/skidoomanubuntu/SunFounder_PiCar-V.git
    plugin: dump
    override-stage: |
      craftctl default
      mkdir -p "${CRAFT_STAGE}/etc/"
      cp "${CRAFT_PART_SRC}/remote_control/remote_control/new_car.py" "${CRAFT_STAGE}/etc/"
    override-prime: |
      craftctl default
      #mkdir "${CRAFT_PRIME}/etc/"
      cp "${CRAFT_STAGE}/etc/new_car.py" "${CRAFT_PRIME}/etc/"
      mv "${CRAFT_PRIME}/remote_control/remote_control/templates" "${CRAFT_PRIME}"
      mv "${CRAFT_PRIME}/remote_control/remote_control/static" "${CRAFT_PRIME}"
